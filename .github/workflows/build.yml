# GitHub Actions Workflow created for testing and preparing the plugin release in following steps:
# - validate Gradle Wrapper,
# - run test and verifyPlugin tasks,
# - run buildPlugin task and prepare artifact for the further tests,
# - run IntelliJ Plugin Verifier,
# - create a draft release.
#
# Workflow is triggered on push and pull_request events.
#
# Docs:
# - GitHub Actions: https://help.github.com/en/actions
# - IntelliJ Plugin Verifier GitHub Action: https://github.com/ChrisCarini/intellij-platform-plugin-verifier-action

name: Build
on:
  # Trigger the workflow on pushes to only the 'master' branch (this avoids duplicate checks being run e.g. for dependabot pull requests)
  push:
    branches:
      - master
      - '**/compat/*'
    paths-ignore:
      - '.idea/**'
      - '.run/**'
      - 'art/**'
      - 'images/**'
      - '.gitignore'
      - 'README.md'
      - 'FINANCIAL_CONTRIBUTORS.md'

  # Trigger the workflow on any pull request
  pull_request:
    paths-ignore:
      - '.idea/**'
      - '.run/**'
      - 'art/**'
      - 'images/**'
      - '.gitignore'
      - 'README.md'
      - 'FINANCIAL_CONTRIBUTORS.md'

jobs:

  # Run Gradle Wrapper Validation Action to verify the wrapper's checksum
  # Run verifyPlugin, IntelliJ Plugin Verifier, and test Gradle tasks
  # Build plugin and provide the artifact for the next workflow jobs
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Validate wrapper
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1.0.5

      # Setup Java 11 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 11
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        env:
          AUTO_SNAPSHOT_VERSION: false
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          
          echo "version: $VERSION"
          echo "changelog:"
          echo "$CHANGELOG"
          
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "::set-output name=version::$VERSION"
          echo "::set-output name=changelog::$CHANGELOG"
          echo "::set-output name=pluginVerifierHomeDir::~/.pluginVerifier"

          ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

      # Run tests
      - name: Run Tests
        run: ./gradlew test

      # Collect Tests Result of failed tests
      - name: Collect Tests Result
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: tests-result
          path: ${{ github.workspace }}/build/reports/tests

      # Cache Plugin Verifier IDEs
      - name: Setup Plugin Verifier IDEs Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
          key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}

      # Run Verify Plugin task and IntelliJ Plugin Verifier tool
      - name: Run Plugin Verification tasks
        continue-on-error: true
        run: ./gradlew runPluginVerifier -Pplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir }}

      # Collect Plugin Verifier Result
      - name: Collect Plugin Verifier Result
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: pluginVerifier-result
          path: ${{ github.workspace }}/build/reports/pluginVerifier

      # Run Qodana inspections
      #- name: Qodana - Code Inspection
      #  uses: JetBrains/qodana-action@v4.2.5

      # Prepare plugin archive content for creating artifact
      - name: Prepare Plugin Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=`ls *.zip`
          unzip "$FILENAME" -d content
          echo "::set-output name=filename::${FILENAME:0:-4}"

      # Store already-built plugin as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v3

      # Remove old release drafts by using the curl request for the available releases with draft flag
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH="${{ github.ref_name }}"
          gh api repos/{owner}/{repo}/releases \
            --jq ".[] | select(.draft == true and .target_commitish == \"${BRANCH}\") | .id" \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH="${{ github.ref_name }}"
          gh release create v${{ needs.build.outputs.version }} \
            --target "$BRANCH" \
            --draft \
            --title "v${{ needs.build.outputs.version }}" \
            --notes "$(cat << 'EOM'
          ## What's Changed

          ${{ needs.build.outputs.changelog }}
          EOM
          )"
